clear
clc

figure_handle = figure; % 새로운 그림 요소를 만듭니다.

% 로봇의 초기 위치 및 속도 설정
x = 0; % 초기 x 위치
y = 0; % 초기 y 위치
theta = 0; % 초기 방향 (라디안 단위)
v = 4.16; % 초기 속도 (m/s)
v_increment = 0.5; % 속도 증가/감소 단위

% 시간 설정
dt = 0.1; % 시간 간격 (초)
total_time = 10; % 전체 주행 시간 (초)
time_steps = total_time / dt;

% 로봇의 크기 설정
L = 0.85; % 로봇의 길이 (m)
W = 0.5; % 로봇의 너비 (m)
H = 1.1; % 로봇의 높이 (m)

% Sau, Sal, Swu, Swl 배열 초기화
Sau_array = zeros(1, time_steps);
Sal_array = zeros(1, time_steps);
Swu_array = zeros(1, time_steps);
Swl_array = zeros(1, time_steps);

%각도 모두 degree
for t = 1:time_steps
    roll = input('roll 값을 입력하세요: ');
    pitch = input('pitch 값을 입력하세요: ');
    yaw = input('yaw 값을 입력하세요: ');
    a_Gx = input('x방향 가속도를 입력하세요: ');

    % 가속도 및 각가속도 계산
    p = roll / dt;
    q = pitch / dt;
    r = yaw / dt;
    alpha_x = p / dt;
    alpha_y = q / dt;
    alpha_z = r / dt;
    m = 70; % 로봇의 질량 (kg)
    g = 9.81; % 중력 가속도 (m/s^2)
    w = alpha_z;

    roll_terrain = 0;
    T = 0.8;

    RR = L / (20 * (pi / 180));
    if r < 0
        a_Gy = -v^2/RR;
    elseif r == 0
        a_Gy = 0;
    else
        a_Gy = v^2/RR;
    end

    I_xx = 10.0475;
    I_yy = 5.67291;
    I_zz = 7.29166;

    I = [I_xx 0 0; 0 I_yy 0; 0 0 I_zz];

    R_roll = [
        1 0 0;
        0 cosd(roll) -sind(roll);
        0 sind(roll) cosd(roll)
    ];

    R_pitch = [
        cosd(pitch) 0 sind(pitch);
        0 1 0;
        -sind(pitch) 0 cosd(pitch)
    ];

    R_yaw = [
        cosd(yaw) -sind(yaw) 0;
        sind(yaw) cosd(yaw) 0;
        0 0 1
    ];

    R = R_yaw * R_pitch * R_roll;

    % 회전 중심을 설정합니다.
    rotation_center = [0; 0; 0];

    % x_zmp와 y_zmp 계산(각도는 모두 degree)
    x_zmp = (1/(2*m*(-g*cosd(pitch)*cosd(roll)))) * (-2*I_yy*alpha_y - 2*(I_xx-I_zz)*p*r + 2*m*g*H*sind(pitch) + m*g*T*abs(tand(roll-roll_terrain))*sind(pitch) + 2*m*H*a_Gx + m*T*a_Gx*abs(tand(roll-roll_terrain)) + ...
        ((g*sind(pitch)+a_Gx)*(m*T*abs(tand(roll-roll_terrain))*(-g*cosd(pitch)*sind(roll)+a_Gy) + 2*(I_xx*alpha_x-(I_yy-I_zz)*q*r) - m*g*H*cosd(pitch)*sind(roll) + m*H*a_Gy))*tand(roll-roll_terrain)) / ...
        (g*cosd(pitch)*cosd(roll_terrain)*secd(roll-roll_terrain) - a_Gy*(tand(roll-roll_terrain)));

    y_zmp = (m*g*cosd(pitch)*sind(roll)*(T*abs(tand(roll-roll_terrain))+2*H) - m*a_Gy*(T*abs(tand(roll-roll_terrain))+2*H) - 2*I_xx*alpha_x + 2*(I_yy-I_zz)*q*r) / ...
        (2*m*(g*cosd(pitch)*cosd(roll_terrain)*secd(roll-roll_terrain) - a_Gy*tand(roll-roll_terrain)));

    % 좌표 변환
    zmp = [x_zmp; y_zmp; 0];
    zmp_centered = zmp - rotation_center;
    result_zmp_centered = R * zmp_centered;
    result_zmp = result_zmp_centered + rotation_center;
    x_zmp_mod = result_zmp(1)
    y_zmp_mod = result_zmp(2)

    % 모서리 좌표 설정
    corners = [
        -L/2, -W/2, 0;
        -L/2, W/2, 0;
        L/2, W/2, 0;
        L/2, -W/2, 0
    ]';

    % 좌표 변환
    corners_centered = corners - rotation_center;
    cdn_mod = R * corners_centered + rotation_center;

    % 좌표 배열
    x_values = cdn_mod(1, :);
    y_values = cdn_mod(2, :);

    % 최대값과 최소값 계산
    max_x = max(x_values);
    min_x = min(x_values);
    max_y = max(y_values);
    min_y = min(y_values);

    % 안정성 한계 계산
    Sau = (1/2) * (1 - (g / (4 * H) * (x_zmp_mod - max_x)))
    Sal = (1/2) * (1 + (g / (4 * H) * (x_zmp_mod - min_x)))
    Swu = (1/2) * (1 - (g / (4 * H)) * (y_zmp_mod - max_y))
    Swl = (1/2) * (1 + (g / (4 * H)) * (y_zmp_mod - min_y))

     % Sau, Sal, Swu, Swl 배열 저장
    Sau_array(t) = Sau;
    Sal_array(t) = Sal;
    Swu_array(t) = Swu;
    Swl_array(t) = Swl;

    % Sau, Sal, Swu, Swl 값이 0.5보다 작을 경우 속도 감소
    if Sau < 0.5 || Sal < 0.5 || Swu < 0.5 || Swl < 0.5
        v = v - v_increment;
    % Sau, Sal, Swu, Swl 값이 모두 0.5보다 클 경우 속도 증가
    elseif Sau > 0.5 && Sal > 0.5 && Swu > 0.5 && Swl > 0.5
        v = v + v_increment;
    end

    % 현재 위치 업데이트
    x = x + v * cos(theta) * dt;
    y = y + v * sin(theta) * dt;
    theta = theta + alpha_z * dt;

    % 그래프 그리기
    hold on
    plot([corners(1, :), corners(1, 1)], [corners(2, :), corners(2, 1)], 'b-')
    plot(x_zmp_mod, y_zmp_mod, '-o')
    text(x_zmp_mod, y_zmp_mod, 'x_zmp, y_zmp')
    plot([cdn_mod(1, :), cdn_mod(1, 1)], [cdn_mod(2, :), cdn_mod(2, 1)], 'r-')
    hold off
    
    xlabel('x(m)');
    ylabel('y(m)');
    axis equal
    xlim([-1 1] + x);
    ylim([-1 1] + y);
    pause(dt); % 잠시 멈추어 시뮬레이션을 진행합니다.

    % 사용자에게 계속할 것인지 물어봅니다.
    prompt = '그래프를 계속해서 그리시겠습니까? (Y/N): ';
    answer = input(prompt, 's');
    if ~strcmpi(answer, 'y')
        break; % 사용자가 종료를 원하면 루프를 종료합니다.
    end
end


% 마지막에 그린 모든 그래픽 요소를 함께 표시합니다.
legend('Initial position', 'ZMP', 'Projection Polygon')
