clear
clc

    %로봇 모델
    m = 70; % 로봇의 질량 (kg)
    g = 9.81; % 중력 가속도 (m/s^2)
    roll_terrain = 0;

    T = 0.7;
    L = 0.85; % 로봇의 길이 (m)
    W = 0.5; % 로봇의 너비 (m)
    H = 0.3+0.2+0.5; % 로봇의 무게중심 (m)

    I_xx = 10.0475;
    I_yy = 5.67291;
    I_zz = 7.29166;
    I = [I_xx 0 0; 0 I_yy 0; 0 0 I_zz];


    %각도 모두 degree
    roll = input('roll 값을 입력하세요: ');
    pitch = input('pitch 값을 입력하세요: ');
    yaw = input('yaw 값을 입력하세요: ');
    a_Gx = input('x방향 가속도를 입력하세요: ');
    dt=1;
    
    % 가속도 및 각가속도 계산
    p = roll / dt;
    q = pitch / dt;
    r = yaw / dt;
    alpha_x = p / dt;
    alpha_y = q / dt;
    alpha_z = r / dt;
    v = 4; 
    vmax=4;
    w = r*pi/180;
    a_Gy = v*w
    

    R_roll = [
        1 0 0;
        0 cosd(roll) -sind(roll);
        0 sind(roll) cosd(roll)
    ];

    R_pitch = [
        cosd(pitch) 0 sind(pitch);
        0 1 0;
        -sind(pitch) 0 cosd(pitch)
    ];

    R_yaw = [
        cosd(yaw) -sind(yaw) 0;
        sind(yaw) cosd(yaw) 0;
        0 0 1
    ];

    R = R_yaw * R_pitch * R_roll;


    % x_zmp와 y_zmp 계산(각도는 모두 degree)
    x_zmp = (1/(2*m*(-g*cosd(pitch)*cosd(roll)))) * (-2*I_yy*alpha_y - 2*(I_xx-I_zz)*p*r + 2*m*g*H*sind(pitch) + m*g*T*abs(tand(roll-roll_terrain))*sind(pitch) + 2*m*H*a_Gx + m*T*a_Gx*abs(tand(roll-roll_terrain)) + ...
        ((g*sind(pitch)+a_Gx)*(m*T*abs(tand(roll-roll_terrain))*(-g*cosd(pitch)*sind(roll)+a_Gy) + 2*(I_xx*alpha_x-(I_yy-I_zz)*q*r) - m*g*H*cosd(pitch)*sind(roll) + m*H*a_Gy))*tand(roll-roll_terrain)) / ...
        (g*cosd(pitch)*cosd(roll_terrain)*secd(roll-roll_terrain) - a_Gy*(tand(roll-roll_terrain)));

    y_zmp = (m*g*cosd(pitch)*sind(roll)*(T*abs(tand(roll-roll_terrain))+2*H) - m*a_Gy*(T*abs(tand(roll-roll_terrain))+2*H) - 2*I_xx*alpha_x + 2*(I_yy-I_zz)*q*r) / ...
        (2*m*(g*cosd(pitch)*cosd(roll_terrain)*secd(roll-roll_terrain) - a_Gy*tand(roll-roll_terrain)));

    % 좌표 변환
    zmp = [x_zmp; y_zmp; 0];
    zmp_centered = zmp ;
    result_zmp_centered = R * zmp_centered;
    result_zmp = result_zmp_centered ;
    x_zmp_mod = result_zmp(1);
    y_zmp_mod = result_zmp(2);

    % 모서리 좌표 설정
    corners = [
        -L/2, -W/2, 0;
        -L/2, W/2, 0;
        L/2, W/2, 0;
        L/2, -W/2, 0
    ]';

    % 좌표 변환
    transformed_corners = R * corners;
    cdn_mod = R * corners;

    % Xu, Xl, Yu. Yl
    Xu=[L/2; y_zmp; 1];
    Xl=[-L/2; y_zmp; 1];
    Yu=[x_zmp; W/2; 1];
    Yl=[x_zmp; -W/2; 1];
    
    %회전행렬이 적용된 Xu, Xl, Yu, Yl
    RXu=R*Xu;
    RXl=R*Xl;
    RYu=R*Yu;
    RYl=R*Yl;

    % 최대값과 최소값 계산
    max_x = RXu(1,1);
    min_x = RXl(1,1);
    max_y = RYu(2,1);
    min_y = RYl(2,1);

    amax=8;
    wmax=pi/2;
    vwmax=vmax*wmax;

    % 안정성 한계 계산
    Sau = (1/2) * (1 - (g / (amax * H) * (x_zmp_mod - max_x)))
    Sal = (1/2) * (1 + (g / (amax * H) * (x_zmp_mod - min_x)))
    Swu = (1/2) * (1 - (g / (vwmax * H)) * (y_zmp_mod - max_y))
    Swl = (1/2) * (1 + (g / (vwmax * H)) * (y_zmp_mod - min_y))

    % 그래프 그리기
    hold on
    plot([corners(1, :), corners(1, 1)], [corners(2, :), corners(2, 1)], 'b-')
    plot(x_zmp_mod, y_zmp_mod, '-o')
    text(x_zmp_mod, y_zmp_mod, 'x_zmp, y_zmp')
    plot(RXu(1,1),RXu(2,1),'-o');
    plot(RXl(1,1),RXl(2,1),'-o');
    plot(RYu(1,1),RYu(2,1),'-o');
    plot(RYl(1,1),RYl(2,1),'-o');
    plot([cdn_mod(1, :), cdn_mod(1, 1)], [cdn_mod(2, :), cdn_mod(2, 1)], 'r-')
    hold off
    
    xlabel('x(m)');
    ylabel('y(m)');
    axis equal
    xlim([-1 1] );
    ylim([-1 1] );
  


% 마지막에 그린 모든 그래픽 요소를 함께 표시합니다.
legend('Initial position', 'ZMP', 'Projection Polygon')
